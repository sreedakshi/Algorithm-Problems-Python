from linked_list import LinkedList
from linked_list_node import LinkedListNode
            
def reorder_list(head):
    slow, fast = head, head

    while (fast and fast.next):
        slow = slow.next
        fast = fast.next.next
    
    curr = slow
    prev = None 
    next_node = curr.next
    while (next_node):
        curr.next = prev
        prev = curr
        curr = next_node
        next_node = curr.next
    curr.next = prev

    second = curr
    first = head
    
    while second.next:
        first.next, first = second, first.next
        second.next, second = first, second.next
    
    return head

# Time Complexity: O(n) as we traverse through all the nodes in order to find the middle node and reverse the second half of the list. Also, the last while loop also goes through only half of the list elements.

# Space Complexity: O(1) as the manipulation happens to the linked list in-place.
