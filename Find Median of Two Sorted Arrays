class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        A = nums1
        B = nums2

        l = len(A) + len(B)

        if l % 2 == 1:
            return self.kth(A, B, l // 2)
        else:
            return (self.kth(A, B, l // 2) + self.kth(A, B, l // 2 - 1)) / 2.0

    def kth(self, a, b, k):
        # Always make sure a is the shorter array
        if len(a) > len(b):
            return self.kth(b, a, k)

        if not a:
            return b[k]
        if not b:
            return a[k]

        ia = len(a) // 2
        ib = len(b) // 2
        ma = a[ia]
        mb = b[ib]

        # When k is greater than the sum of a and b's median indices
        if ia + ib < k:
            if ma > mb:
                # if a's median is bigger than b's, b's first half doesn't include k
                return self.kth(a, b[ib + 1:], k - ib - 1)
            else:
                # otherwise, a's first half doesn't include k
                return self.kth(a[ia + 1:], b, k - ia - 1)

        # when k is smaller than the sum of a and b's indices
        else:
            if ma > mb:
                # if a's median is bigger than b's, a's second half doesn't include k
                return self.kth(a[:ia], b, k)
            else:
                # otherwise, b's second half doesn't include k
                return self.kth(a, b[:ib], k)
