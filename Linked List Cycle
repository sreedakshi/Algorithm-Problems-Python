# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        slow, fast = head, head

        while (fast and fast.next):
            slow = slow.next
            fast = fast.next.next
            if (slow == fast):
                return True

        return False

# Explanation: The naive way to approach this problem is to use a hash map/dictionary and store all the visited nodes. If the current node is already in the map, then there is a cycle. But the optimized way
# to appraoch this is to use fast and slow pointers. The slow pointer moves by 1 and the fast by 2. If there is a cycle they will intersect at some point as the distance between the two pointers will decrease.
# This uses constant space instead of additional space.

# Time Complexity: O(n) as it takes only n maximum steps for them to meet.

# Space Complexity: O(1) as the only space being used is for slow and fast pointers which are constant.
