from linked_list_node import LinkedListNode

def remove_nth_last_node(head, n):
    left, right = head, head

    for i in range(0, n):
        right = right.next

    if not right:
        return head.next
    
    while (right and right.next):
        right = right.next
        left = left.next
    
    left.next = left.next.next
    return head


# Explanation: This approach uses the two pointer method. Set up left and right pointers to point to the head of the list. Move the right pointer n times to the right. Move the left and the right pointer
# by one until the right pointer reaches the last node. The left pointer is pointing to the node to the left of the node to be removed. Connect the left node to the node two nodes after it to remove the nth
# from the end node. Return the beginning of the list.

# Time Complexity: O(n) as we parse through the whole linked list.

# Space Complexity: O(1) as we only use constant space.
